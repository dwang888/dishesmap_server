package wd.goodFood.features;

import java.util.List;

import opennlp.tools.namefind.TokenNameFinder;
import opennlp.tools.util.Span;
import opennlp.tools.util.featuregen.FeatureGeneratorAdapter;


public class MyInSpanGenerator extends FeatureGeneratorAdapter {

  private final String prefix;
  
  private final TokenNameFinder finder;

  private String currentSentence[];

  private Span currentNames[];

  /**
   * Initializes the current instance. 
   *
   * @param prefix the prefix is used to distinguish the generated features
   * from features generated by other instances of {@link InSpanGenerator}s.
   * @param finder the {@link TokenNameFinder} used to detect the names.
   */
  public MyInSpanGenerator(String prefix, TokenNameFinder finder) {
    
    if (prefix == null) 
        throw new IllegalArgumentException("prefix must not be null!");
    
    this.prefix = prefix;
    
    if (finder == null)
        throw new IllegalArgumentException("finder must not be null!");
    
    this.finder = finder;
  }

  public void createFeatures(List<String> features, String[] tokens, int index,
        String[] preds) {
    // cache results for sentence
    if (currentSentence != tokens) {
      currentSentence = tokens;
      currentNames = finder.find(tokens);
    }
//    System.out.println(finder.);

    // iterate over names and check if a span is contained
    for (int i = 0; i < currentNames.length; i++) {
    	
      if (currentNames[i].contains(index)) {
        // found a span for the current token
//        features.add(prefix + ":w=dic");
        features.add(prefix + ":w=dic=" + tokens[index]);
//        System.out.println(tokens[index]);

        break;
      }
    }
  }
}
